import {
  Injectable,
  NotFoundException,
  BadRequestException,
} from '@nestjs/common';
import { WalletRepository } from 'src/domain/repositories/wallet.repository';
import { UserRepository } from 'src/domain/repositories/user.repository';
import { WalletEntity } from 'src/domain/entities/wallet.entity';
import { v4 as uuid } from 'uuid';
import { EthereumWalletService } from 'src/application/service/ethereum-wallet.service';
import { BitcoinWalletService } from 'src/application/service/bitcoin-wallet.service';

interface CreateCryptoWalletInput {
  userId: string;
  tokenSymbol: string; // ETH, USDT, BTC –∏ —Ç.–ø.
  network: string; // ethereum, polygon –∏ —Ç.–ø.
  label?: string;
}

@Injectable()
export class CreateCryptoWalletUseCase {
  constructor(
    private readonly walletRepo: WalletRepository,
    private readonly userRepo: UserRepository,
    private readonly ethWalletService: EthereumWalletService,
    private readonly btcWalletService: BitcoinWalletService,
  ) {}

  async execute(input: CreateCryptoWalletInput): Promise<WalletEntity> {
    const { userId, tokenSymbol, network, label } = input;

    const user = await this.userRepo.findById(userId);
    if (!user) throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤
    const existing = await this.walletRepo.findAllByUserAndToken(
      userId,
      tokenSymbol,
    );
    if (existing.length >= 2) {
      throw new BadRequestException(
        `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ 2 –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è ${tokenSymbol}`,
      );
    }

    // üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –∫–ª—é—á–∞
    let address: string;
    let encryptedPrivateKey: string;

    if (tokenSymbol === 'BTC') {
      const btcWallet = await this.btcWalletService.generateWallet();
      address = btcWallet.address;
      encryptedPrivateKey = btcWallet.encryptedPrivateKey;
    } else {
      const ethWallet = await this.ethWalletService.generateWallet();
      address = ethWallet.address;
      encryptedPrivateKey = ethWallet.encryptedPrivateKey;
    }

    // üß± –°–±–æ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏
    const wallet = new WalletEntity(
      uuid(),
      user.id,
      tokenSymbol,
      'crypto',
      network,
      address,
      encryptedPrivateKey,
      0,
      '0',
      label ?? `–ö–æ—à–µ–ª—ë–∫ ${existing.length + 1}`,
    );
    console.log('wallet: ', wallet);

    await this.walletRepo.save(wallet);
    return wallet;
  }
}
